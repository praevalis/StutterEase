from uuid import UUID
from sqlalchemy import select
from sqlalchemy.orm import Session
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_core.language_models.chat_models import BaseChatModel

from src.core.database import get_by_id_or_404
from src.coach.models import Conversation, Scenario, Message
from src.coach.schemas import (
    ConversationCreateDto, 
    ConversationDto,
    ScenarioCreateDto,
    ScenarioUpdateDto,
    ScenarioDto,
    MessageCreateDto,
    MessageDto
)

async def get_all_conversations_for_user(user_id: UUID, session: Session) -> list[ConversationDto]:
    """
    Fetches all conversations for an user.

    Args:
        user_id: Id of the user.
        session: Database session.

    Returns:
        list[Conversation]: List of conversations.
    """
    query = select(Conversation).where(Conversation.user_id == user_id)
    conversations = session.execute(query).scalars().all()
    return [ConversationDto.model_validate(conv) for conv in conversations]

async def create_conversation(
    create_dto: ConversationCreateDto,
    session: Session
) -> ConversationDto:
    """
    Creates a conversation and stores it in database.

    Args:
        create_dto: Data to create conversation.
        session: Database session.

    Returns:
        ConversationDto: Created conversation.
    """
    conversation = Conversation(
        user_id=create_dto.user_id,
        scenario_id=create_dto.scenario_id
    )
    session.add(conversation)
    session.commit()
    session.refresh(conversation)

    return ConversationDto.model_validate(conversation)

async def get_all_scenarios(session: Session) -> list[ScenarioDto]:
    """
    Fetches all scenarios.

    Args:
        session: Database session.

    Returns:
        list[ScenarioDto]: List of scenarios.
    """
    query = select(Scenario)
    scenarios = session.execute(query).scalars().all()
    return [ScenarioDto.model_validate(s) for s in scenarios]

async def create_scenario(
    create_dto: ScenarioCreateDto, 
    session: Session
) -> ScenarioDto:
    """
    Creates a scenario and stores it in database.

    Args:
        create_dto: Data to create scenario.
        session: Database session.

    Returns:
        ScenarioDto: Created scenario.    
    """
    scenario = Scenario(
        title=create_dto.title,
        description=create_dto.description
    )

    session.add(scenario)
    session.commit()
    session.refresh(scenario)

    return ScenarioDto.model_validate(scenario)

async def update_scenario(
    scenario_id: UUID,
    update_dto: ScenarioUpdateDto,
    session: Session
) -> ScenarioDto:
    """
    Updates a scenario.

    Args:
        scenario_id: Id of the scenario to update.
        update_dto: Data to update scenario.
        session: Database session.

    Returns:
        ScenarioDto: Updated scenario.
    """
    scenario_to_update = get_by_id_or_404(Scenario, scenario_id, session)

    update_dict = update_dto.model_dump(exclude_unset=True)
    for field, value in update_dict.items():
        setattr(scenario_to_update, field, value)

    session.commit()
    session.refresh(scenario_to_update)

    return ScenarioDto.model_validate(scenario_to_update)

async def save_message(
    create_dto: MessageCreateDto, 
    session: Session
) -> MessageDto:
    """
    Saves message in database.

    Args:
        create_dto: Data to create message.
        session: Database session.

    Returns:
        MessageDto: Created message.
    """
    message = Message(
        source=create_dto.source,
        conversation_id=create_dto.conversation_id,
        content=create_dto.content
    )
    
    session.add(message)
    session.commit()
    session.refresh(message)

    return MessageDto.model_validate(message)

async def generate_reply(
    message_history: BaseChatMessageHistory, 
    model: BaseChatModel
) -> str:
    """
    Generates reply for the latest message in the message history.
    
    Args:
        message_history: Entire history of the conversation.

    Returns:
        str: Reply generated by the model.

    """
    response = await model.ainvoke(message_history)
    return response.content.strip()